NYU Concepts and Categories Lab 2009

Procedure for running soundTest_v4.py

You will need:
2 PC's (2 Macs were used for our trials)
1 Contact Microphone
1 3.5mm (1/8") Male to Male TRS cable
1 1/4"Female to 3.5mm Male TRS adaptor
1 3.5mm Male to 2 3.5 Female TRS Y-adaptor
(optional) 1 3.5mm Female to 3.5mm Male extension cable
Sound Recording software on at least one PC (We used Audacity, a free multiplatform, open source sound recording/editing tool)
Tape
A steady hand

The set up is as follows:
Plug in one end of the 3.5mm Male to Male connector into the Audio-Out port of the PC that will be running the 
soundTest_v4.py script. Plug the other end of the same connector into one of the female ports of the Y-adaptor.
Take the contact mic and tape it down to an unused area (meaning no keys) on the keyboard of the PC that will be 
running the soundTest_v4.py script (taping to the keyboard is not completely necessary, see further notes). The contact
mic we were using had a 1/4' male plug, so it was necessary to convert it using a 1/4'Female to 3.5mm Male adaptor.
Plug this end of the contact mic into the other port on the Y-adaptor. Now plug the Y-adaptor into the Audio-In port 
of the PC that has the audio recording software installed. In our case the Y-adaptor did not fit in comfortably ( it's plastic
enclosure was too wide) to the port so we had to use an extension cable. 

The contact mic does not need to be taped down to the keyboard, however you may experience best results with this method.
Taping down the mic to the table/desk the keyboard will ultimately be resting on is an acceptable alternative pending that
the recording software and contact mic can pick up the noise from key presses. 

Procedure:
Before anything, you may want to test the volume levels coming from the PC running the python script and from the contact
mic. Run the recording software and run 'print \a' on a Python console to ensure that the system alarms are being picked up. 
Additionally, make a few trial key presses to see if the contact mic picks up the vibrations. Try to aim for a comfortable
force when pressing, as you will be doing the same repetitive motion for 500 trials at a time. There may be some feedback 
in the form of static, but this should be alright if your system alarms and key presses are significantly louder than 
the feedback. Most audio recording/editing software can remove this noise later. 

When you are ready to begin, start recording on the recording PC and then begin the script on the other PC. Be cautious not
to hit anything too hard when starting the script as it may be picked up by the contact mic. This will cause an error in
later analysis, but you can always cut out that noise from the .wav file being recorded. The python script will ring 
the system alarm once and will being polling for responses. The system alarm that rings is used as a single to the start of
the experiment for the .wav file. On screen the word 'Click!' will be displayed (by default) every 500ms and then you will 
be able to press either P or Q to record a response. Be sure to press the keys cleanly and with sufficient force so that
the contact mic can record the key press. 

We are prone to errors when pressing a key for 500 trials (too soft, hit the key before 'Click!' appeared, etc.) 
Luckily, many of these errors will be weeded out in later processing. The only issue is that pressing the wrong key (like
pressing the 'O' key) will have to be edited out of the wav file at a later time. If a key press is missed (if the key was
pressed too lightly) then a placeholder trial will be outputted with values listed as '9999999'. You will have to go back
and manual amplify the sound at that point in the wav file, and re-run the analysis.

When you're done running the script, it will produce a .dat file containing the results of each trial. You need to move that
data file to the recording pc for analysis. Place the .dat file into the 'data' folder of the soundTest directory and place
the (clean) wav file into the 'sounds' folder. Then go into the processWavs_v4.py script and change the parameters in the
do_exp method to match the names of the data file and sound file currently being analyzed. 

Generally, the noise generated by the system bell and contact mic are dramatically louder than baseline noise and static. 
Taking this into account, it makes it almost unnecessary to derive an algorithm to select the threshold in determining 
noise onset. It is much simpler and easier to just select a value that will reliably pick up all the points in the wav 
file. To select this value, you can change the variable 'absolute' in the 'histog' method. Values between 2000-3000 worked 
quite well for our runnings. 

In its current form, processWavs_v4.py prints the analysis one line at a time to the console. When running processWavs_v4.py
you may want to redirect output to a data file in this manner:

User@Computer$ python processWavs_v4.py > output_1.dat

ProcessWavs_v4.py also allows for a note to be placed inside the data file, incase you need to mark something that happend. 
This can be done in this manner:

User@Computer$ python processWavs_v4.py 'first successful running of processWavs!' > output_1.dat



After running processWavs_v4.py you will get an output that will resemble this:

[0, 2518, 2458.1859410430848, 59.814058956915233, 2518, 2458.1859410430848, 59.814058956915233, 9.4889569160997738, 0]
[1, 3396, 3339.0476190476184, 56.952380952381645, 878, 880.8616780045337, -2.8616780045337009, 10.369818594104308, 0]
[2, 4213, 4158.4126984126997, 54.587301587300317, 817, 819.3650793650811, -2.3650793650811011, 11.189183673469389, 0]
							...
The values correspond to:

[trial, time since start python pc, time since start recording pc, difference in time since start, 
	time since last trial python pc, time since last trial recording pc, difference in time since last, bookend placeholder]

Of the most importance is the 6th value, which will tell you the difference in time (in ms) since the last trial when comparing
the recording PC and the python PC. Ideally you want this number to be very low in order to ensure that your processor is
accurately recording reaction time. Generally the number will hover around 0ms, but if it deviates greatly you may have to 
take a closer look at your recording procedure or hardware. 

Thank you for choosing py.psy.exp as your python psychology library of choice.

Questions, Comments?
email us at ...(where?)...





 